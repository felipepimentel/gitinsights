#!/bin/bash

# Verifique se a variável de ambiente está definida
if [[ -z "$ZSH_MODULES_DIRS" ]]; then
    echo "Error: ZSH_MODULES_DIRS is not set." >&2
    exit 1
fi

# ----------------------
# Bloco 1: Geração do Mapeamento
# ----------------------

declare -A mappings

generate_mapping() {
    local mapping_file="$1"
    while IFS='=' read -r key value; do
        mappings["$key"]="$value"
    done < "$mapping_file"
}

# ----------------------
# Bloco 2: Processamento do Mapeamento
# ----------------------

process_mapping() {
    local name type module_dir system_dir

    name=${mappings[name]}
    type=${mappings[type]}
    module_dir="$ZSH_MODULES_DIRS/$name"

    if [[ "$type" == "autoload" ]]; then
        export "$(echo "$name" | tr '[:lower:]' '[:upper:]')_DIR=$module_dir"

        for config_file in "$module_dir"/{aliases,functions,variables}.zsh; do
            if [[ -f "$config_file" ]]; then
                source "$config_file"
            fi
        done

        system_dir="$module_dir/System"
        if [[ -d "$system_dir" ]]; then
            find "$system_dir" -type f | while read -r file; do
                target="${file#$system_dir}"
                ln -sfn "$file" "$target"
                echo "Created symlink: $file -> $target"
            done
        fi
    fi
}

# ----------------------
# Bloco 3: Busca e Processamento dos Arquivos de Módulo
# ----------------------

process_module_files() {
    local modules_dir="$1"
    for dir in "$modules_dir"/*; do
        if [[ -d "$dir" ]]; then
            local mapping_file="$dir/mapping"
            if [[ -f "$mapping_file" ]]; then
                generate_mapping "$mapping_file"
                process_mapping
            fi
        fi
    done
}

# Iterar através de cada diretório especificado em ZSH_MODULES_DIRS
IFS=':' read -ra MODULES_DIRS <<< "$ZSH_MODULES_DIRS"
for MODULES_DIR in "${MODULES_DIRS[@]}"; do
    process_module_files "$MODULES_DIR"
done

#!/bin/bash

# Verifique se a variável de ambiente está definida
if [[ -z "$DOTFILES_DIR_ENV" ]]; then
    echo "Error: DOTFILES_DIR_ENV is not set." >&2
    exit 1
fi

# Declarar um array associativo
declare -A mappings

# Função para criar symlinks a partir de um arquivo de mapeamento
create_symlinks() {
    local dots_file="$1"
    local name

    while IFS= read -r line; do
        if [[ "$line" == "["* ]]; then
            # Processar o nome do symlink
            name="${line:1:-1}"
        elif [[ "$line" == *"="* ]]; then
            # Dividir a linha em chave e valor
            IFS='=' read -r key value <<< "$line"
            # Construir a chave do array associativo
            local key_name="${name}_${key}"
            # Armazenar o valor no array associativo
            mappings["$key_name"]=$value
        fi
    done < "$dots_file"

    # Processar os mapeamentos
    for key in "${!mappings[@]}"; do
        if [[ "$key" =~ _type$ ]]; then
            local name="${key%_type}"
            local type="${mappings[$key]}"
            local source="${mappings[${name}_source]}"
            local target="${mappings[${name}_target]}"

            if [[ "$type" == "symlink" ]]; then
                if [[ -e "$target" ]]; then
                    if [[ -L "$target" ]]; then
                        echo "Symlink already exists: $target -> $(readlink "$target")"
                    else
                        mv "$target" "$target.bak"
                        echo "Moved existing file to $target.bak"
                    fi
                fi
                ln -s "$source" "$target"
                echo "Created symlink: $source -> $target"
            fi
        fi
    done
}

# Iterando através de cada diretório no projeto dotfiles
for dir in "$DOTFILES_DIR_ENV"/*; do
    if [[ -d "$dir" ]]; then
        local dots_file="$dir/dots"
        if [[ -f "$dots_file" ]]; then
            create_symlinks "$dots_file"
        fi
    fi
done

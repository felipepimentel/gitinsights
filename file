from sqlalchemy import create_engine, Column, Integer, String, DateTime, func
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from datetime import datetime

# Definição da base declarativa
Base = declarative_base()

# Modelo para a tabela de execução da jornada
class JourneyExecution(Base):
    __tablename__ = 'journey_executions'
    id = Column(Integer, primary_key=True)
    journey_name = Column(String, nullable=False)
    last_execution = Column(DateTime, default=datetime.utcnow)

# Classe para gerenciamento das execuções
class ExecutionManager:
    def __init__(self, database_url):
        self.engine = create_engine(database_url)
        Base.metadata.create_all(self.engine)
        self.Session = sessionmaker(bind=self.engine)

    def record_execution(self, journey_name):
        session = self.Session()
        execution = session.query(JourneyExecution).filter_by(journey_name=journey_name).first()
        if execution:
            execution.last_execution = datetime.utcnow()
        else:
            execution = JourneyExecution(journey_name=journey_name)
            session.add(execution)
        session.commit()
        session.close()

    def get_last_execution(self, journey_name):
        session = self.Session()
        execution = session.query(JourneyExecution).filter_by(journey_name=journey_name).first()
        session.close()
        return execution.last_execution if execution else None

# Código de exemplo para usar o ExecutionManager
database_url = 'postgresql://username:password@localhost:5432/mydatabase'

# Inicializa o gerente de execução
execution_manager = ExecutionManager(database_url)

# Nome da jornada
journey_name = 'MyJourney'

# Grava uma nova execução
execution_manager.record_execution(journey_name)

# Recupera a última execução
last_execution = execution_manager.get_last_execution(journey_name)
print(f"A última execução de {journey_name} foi em {last_execution}")
